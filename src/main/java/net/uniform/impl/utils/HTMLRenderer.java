/* 
 * Copyright 2015 Eduardo Ramos.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.uniform.impl.utils;

import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import net.uniform.api.html.SimpleHTMLTag;
import net.uniform.exceptions.UniformException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 * Class responsible of rendering HTML tags generated by elements and forms.
 *
 * @author Eduardo Ramos
 * @see SimpleHTMLTag
 */
public class HTMLRenderer {

    private static final String MARK_TO_REMOVE = "__empty-remove-me__";

    private final List<SimpleHTMLTag> tags;
    private final Map<String, String> placeholders = new HashMap<>();

    public HTMLRenderer(List<SimpleHTMLTag> tags) {
        this.tags = tags;
    }

    public String render() {
        SimpleHTMLTag tagList = new SimpleHTMLTag();

        for (SimpleHTMLTag tag : tags) {
            tagList.addSubTag(tag);
        }

        return render(tagList);
    }

    private String render(SimpleHTMLTag tag) {
        Document document = createDocument(tag);
        String result = renderDocument(document);

        for (Map.Entry<String, String> entry : placeholders.entrySet()) {
            result = result.replace(entry.getKey(), entry.getValue());
        }

        result = result.replace("<" + MARK_TO_REMOVE + ">", "");
        result = result.replace("<" + MARK_TO_REMOVE + "/>", "");
        result = result.replace("</" + MARK_TO_REMOVE + ">", "");

        return result;
    }

    private String renderDocument(Document document) {
        Transformer transformer;
        try {
            transformer = TransformerFactory.newInstance().newTransformer();

            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            transformer.setOutputProperty(OutputKeys.METHOD, "html");

            Writer out = new StringWriter();
            transformer.transform(new DOMSource(document), new StreamResult(out));
            return out.toString();
        } catch (IllegalArgumentException | TransformerException ex) {
            throw new UniformException("Error while rendering DOM document as HTML", ex);
        }
    }

    private Document createDocument(SimpleHTMLTag tag) {
        try {
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            dbf.setValidating(false);
            DocumentBuilder db;
            db = dbf.newDocumentBuilder();

            Document document = db.newDocument();
            createDocument(document, null, tag);

            return document;
        } catch (ParserConfigurationException ex) {
            throw new UniformException("Error while creating DOM document for HTML rendering", ex);
        }
    }

    private void createDocument(Document document, Element parent, SimpleHTMLTag tag) {
        String tagName = tag.getName();

        Element elementNode;
        if (tagName != null && !tagName.isEmpty()) {
            elementNode = document.createElement(tagName);
        } else {
            //No tag, just arbitrary content, put a placeholder for later removal:
            elementNode = document.createElement(MARK_TO_REMOVE);
        }

        Map<String, String> properties = tag.getProperties();
        if (properties != null) {
            for (Map.Entry<String, String> entry : properties.entrySet()) {
                String prop = entry.getKey();
                String value = entry.getValue();

                elementNode.setAttribute(prop, value);
            }
        }

        List<SimpleHTMLTag> subTags = tag.getSubTags();
        if (subTags != null && !subTags.isEmpty()) {
            for (SimpleHTMLTag subTag : subTags) {
                createDocument(document, elementNode, subTag);
            }
        }

        String content = tag.getContent();
        if (content != null && !content.isEmpty()) {

            if (tag.isEscapeContent()) {
                elementNode.setTextContent(content);
            } else {
                elementNode.setTextContent(this.generatePlaceholder(content));
            }
        }

        if (parent != null) {
            parent.appendChild(elementNode);
        } else {
            document.appendChild(elementNode);
        }
    }

    private String generatePlaceholder(String content) {
        String placeholder = "PLACEHOLDER_____" + UUID.randomUUID();
        this.placeholders.put(placeholder, content);

        return placeholder;
    }
}
